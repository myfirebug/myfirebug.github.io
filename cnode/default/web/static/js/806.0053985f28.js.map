{"version":3,"file":"static/js/806.0053985f28.js","mappings":"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","sources":["webpack://cli/./node_modules/@remix-run/router/dist/router.js","webpack://cli/./node_modules/css-vars-ponyfill/dist/css-vars-ponyfill.esm.js","webpack://cli/./node_modules/scheduler/cjs/scheduler.production.min.js","webpack://cli/./node_modules/scheduler/index.js"],"sourcesContent":["/**\n * @remix-run/router v1.7.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }));\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          submission,\n          isFetchActionRedirect: true\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    // Check if this an absolute external redirect that goes to a new origin\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let activeSubmission = submission || getSubmissionFromNavigation(state.navigation);\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: getLoadingNavigation(redirectLocation),\n        fetcherSubmission: activeSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a submission, we will preserve it through the redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, activeSubmission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => createUseMatchesMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n      \" _hasFetcherDoneAnything \": true\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n      \" _hasFetcherDoneAnything \": true\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n    \" _hasFetcherDoneAnything \": true\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n    \" _hasFetcherDoneAnything \": true\n  };\n  return fetcher;\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/*!\n * css-vars-ponyfill\n * v2.4.8\n * https://jhildenbiddle.github.io/css-vars-ponyfill/\n * (c) 2018-2022 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\n/*!\n * get-css-data\n * v2.1.0\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018-2022 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */ function getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map((function(x) {\n        return null;\n    }));\n    function isValidCss(text) {\n        var isString = typeof text === \"string\";\n        var isHTML = isString && text.trim().charAt(0) === \"<\";\n        return isString && !isHTML;\n    }\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    var parser = document.createElement(\"a\");\n    urlArray.forEach((function(url, i) {\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isIElte9 = Boolean(document.all && !window.atob);\n        var isIElte9CORS = isIElte9 && parser.host.split(\":\")[0] !== location.host.split(\":\")[0];\n        if (isIElte9CORS) {\n            var isSameProtocol = parser.protocol === location.protocol;\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest;\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    var text = xdr.responseText;\n                    if (isValidCss(text)) {\n                        onSuccess(text, i);\n                    } else {\n                        onError(xdr, i);\n                    }\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout((function() {\n                    xdr.send();\n                }), 0);\n            } else {\n                console.warn(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (\".concat(url, \")\"));\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest;\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    var text = xhr.responseText;\n                    if (xhr.status < 400 && isValidCss(text)) {\n                        onSuccess(text, i);\n                    } else if (xhr.status === 0 && isValidCss(text)) {\n                        onSuccess(text, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    }));\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {boolean}  [options.skipDisabled=true] Determines if disabled\n *                   stylesheets will be skipped while collecting CSS data.\n * @param {boolean}  [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement : document,\n *     include     : 'style,link[rel=\"stylesheet\"]',\n *     exclude     : '[href=\"skip.css\"]',\n *     filter      : /red/,\n *     skipDisabled: true,\n *     useCSSOM    : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        skipDisabled: options.skipDisabled !== false,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter((function(node) {\n        return !matchesSelector(node, settings.exclude);\n    }));\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map((function(x) {\n        return null;\n    }));\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            cssArray.reduce((function(skipIndices, value, i) {\n                if (value === \"\") {\n                    skipIndices.push(i);\n                }\n                return skipIndices;\n            }), []).reverse().forEach((function(skipIndex) {\n                return [ sourceNodes, cssArray ].forEach((function(arr) {\n                    return arr.splice(skipIndex, 1);\n                }));\n            }));\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, (function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach((function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                }));\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        }));\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter((function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        }));\n        importData.urls = importData.rules.map((function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        }));\n        importData.absoluteUrls = importData.urls.map((function(url) {\n            return getFullUrl$1(url, baseUrl);\n        }));\n        importData.absoluteRules = importData.rules.map((function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl$1(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        }));\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach((function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    }));\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach((function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    }));\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach((function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName.toLowerCase() === \"link\" && linkHref && linkRel && linkRel.toLowerCase().indexOf(\"stylesheet\") !== -1;\n            var isSkip = settings.skipDisabled === false ? false : node.disabled;\n            var isStyle = node.nodeName.toLowerCase() === \"style\";\n            if (isLink && !isSkip) {\n                var isURIScheme = linkHref.indexOf(\"data:text/css\") !== -1;\n                if (isURIScheme) {\n                    var cssText = decodeURIComponent(linkHref.substring(linkHref.indexOf(\",\") + 1));\n                    if (settings.useCSSOM) {\n                        cssText = Array.apply(null, node.sheet.cssRules).map((function(rule) {\n                            return rule.cssText;\n                        })).join(\"\");\n                    }\n                    handleSuccess(cssText, i, node, location.href);\n                } else {\n                    getUrls(linkHref, {\n                        mimeType: \"text/css\",\n                        onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                            settings.onBeforeSend(xhr, node, url);\n                        },\n                        onSuccess: function onSuccess(cssText, url, urlIndex) {\n                            var sourceUrl = getFullUrl$1(linkHref);\n                            handleSuccess(cssText, i, node, sourceUrl);\n                        },\n                        onError: function onError(xhr, url, urlIndex) {\n                            cssArray[i] = \"\";\n                            settings.onError(xhr, node, url);\n                            handleComplete();\n                        }\n                    });\n                }\n            } else if (isStyle && !isSkip) {\n                var _cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    _cssText = Array.apply(null, node.sheet.cssRules).map((function(rule) {\n                        return rule.cssText;\n                    })).join(\"\");\n                }\n                handleSuccess(_cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        }));\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl$1(url, base) {\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base || document.baseURI || (document.querySelector(\"base\") || {}).href || location.href;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nvar balancedMatch = balanced;\n\nfunction balanced(a, b, str) {\n    if (a instanceof RegExp) a = maybeMatch(a, str);\n    if (b instanceof RegExp) b = maybeMatch(b, str);\n    var r = range(a, b, str);\n    return r && {\n        start: r[0],\n        end: r[1],\n        pre: str.slice(0, r[0]),\n        body: str.slice(r[0] + a.length, r[1]),\n        post: str.slice(r[1] + b.length)\n    };\n}\n\nfunction maybeMatch(reg, str) {\n    var m = str.match(reg);\n    return m ? m[0] : null;\n}\n\nbalanced.range = range;\n\nfunction range(a, b, str) {\n    var begs, beg, left, right, result;\n    var ai = str.indexOf(a);\n    var bi = str.indexOf(b, ai + 1);\n    var i = ai;\n    if (ai >= 0 && bi > 0) {\n        if (a === b) {\n            return [ ai, bi ];\n        }\n        begs = [];\n        left = str.length;\n        while (i >= 0 && !result) {\n            if (i == ai) {\n                begs.push(i);\n                ai = str.indexOf(a, i + 1);\n            } else if (begs.length == 1) {\n                result = [ begs.pop(), bi ];\n            } else {\n                beg = begs.pop();\n                if (beg < left) {\n                    left = beg;\n                    right = bi;\n                }\n                bi = str.indexOf(b, i + 1);\n            }\n            i = ai < bi && ai >= 0 ? ai : bi;\n        }\n        if (begs.length) {\n            result = [ left, right ];\n        }\n    }\n    return result;\n}\n\nfunction parseCss(css) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var defaults = {\n        preserveStatic: true,\n        removeComments: false\n    };\n    var settings = _extends({}, defaults, options);\n    var errors = [];\n    function error(msg) {\n        throw new Error(\"CSS parse error: \".concat(msg));\n    }\n    function match(re) {\n        var m = re.exec(css);\n        if (m) {\n            css = css.slice(m[0].length);\n            return m;\n        }\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function comment() {\n        whitespace();\n        if (css[0] !== \"/\" || css[1] !== \"*\") {\n            return;\n        }\n        var i = 2;\n        while (css[i] && (css[i] !== \"*\" || css[i + 1] !== \"/\")) {\n            i++;\n        }\n        if (!css[i]) {\n            return error(\"end of comment is missing\");\n        }\n        var str = css.slice(2, i);\n        css = css.slice(i + 2);\n        return {\n            type: \"comment\",\n            comment: str\n        };\n    }\n    function comments() {\n        var cmnts = [];\n        var c;\n        while (c = comment()) {\n            cmnts.push(c);\n        }\n        return settings.removeComments ? [] : cmnts;\n    }\n    function selector() {\n        whitespace();\n        while (css[0] === \"}\") {\n            error(\"extra closing bracket\");\n        }\n        var m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n        if (m) {\n            var _selector = m[0].trim();\n            var selectorItems;\n            var hasComment = /\\/\\*/.test(_selector);\n            if (hasComment) {\n                _selector = _selector.replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, \"\");\n            }\n            var hasCommaInQuotes = /[\"']\\w*,\\w*[\"']/.test(_selector);\n            if (hasCommaInQuotes) {\n                _selector = _selector.replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, (function(m) {\n                    return m.replace(/,/g, \"‌\");\n                }));\n            }\n            var hasMultipleSelectors = /,/.test(_selector);\n            if (hasMultipleSelectors) {\n                selectorItems = _selector.split(/\\s*(?![^(]*\\)),\\s*/);\n            } else {\n                selectorItems = [ _selector ];\n            }\n            if (hasCommaInQuotes) {\n                selectorItems = selectorItems.map((function(s) {\n                    return s.replace(/\\u200C/g, \",\");\n                }));\n            }\n            return selectorItems;\n        }\n    }\n    function declaration() {\n        if (css[0] === \"@\") {\n            return at_rule();\n        }\n        match(/^([;\\s]*)+/);\n        var comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n        var prop = match(/^(\\*?[-#/*\\\\\\w.]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!prop) {\n            return;\n        }\n        prop = prop[0].trim();\n        if (!match(/^:\\s*/)) {\n            return error(\"property missing ':'\");\n        }\n        var val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n        var ret = {\n            type: \"declaration\",\n            property: prop.replace(comment_regexp, \"\"),\n            value: val ? val[0].replace(comment_regexp, \"\").trim() : \"\"\n        };\n        match(/^[;\\s]*/);\n        return ret;\n    }\n    function declarations() {\n        if (!open()) {\n            return error(\"missing '{'\");\n        }\n        var d;\n        var decls = comments();\n        while (d = declaration()) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n        if (!close()) {\n            return error(\"missing '}'\");\n        }\n        return decls;\n    }\n    function keyframe() {\n        whitespace();\n        var vals = [];\n        var m;\n        while (m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/)) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n        if (vals.length) {\n            return {\n                type: \"keyframe\",\n                values: vals,\n                declarations: declarations()\n            };\n        }\n    }\n    function at_keyframes() {\n        var m = match(/^@([-\\w]+)?keyframes\\s*/);\n        if (!m) {\n            return;\n        }\n        var vendor = m[1];\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) {\n            return error(\"@keyframes missing name\");\n        }\n        var name = m[1];\n        if (!open()) {\n            return error(\"@keyframes missing '{'\");\n        }\n        var frame;\n        var frames = comments();\n        while (frame = keyframe()) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n        if (!close()) {\n            return error(\"@keyframes missing '}'\");\n        }\n        return {\n            type: \"keyframes\",\n            name: name,\n            vendor: vendor,\n            keyframes: frames\n        };\n    }\n    function at_page() {\n        var m = match(/^@page */);\n        if (m) {\n            var sel = selector() || [];\n            return {\n                type: \"page\",\n                selectors: sel,\n                declarations: declarations()\n            };\n        }\n    }\n    function at_page_margin_box() {\n        var m = match(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\\s*/);\n        if (m) {\n            var name = \"\".concat(m[1], \"-\").concat(m[2]) + (m[3] ? \"-\".concat(m[3]) : \"\");\n            return {\n                type: \"page-margin-box\",\n                name: name,\n                declarations: declarations()\n            };\n        }\n    }\n    function at_fontface() {\n        var m = match(/^@font-face\\s*/);\n        if (m) {\n            return {\n                type: \"font-face\",\n                declarations: declarations()\n            };\n        }\n    }\n    function at_supports() {\n        var m = match(/^@supports *([^{]+)/);\n        if (m) {\n            return {\n                type: \"supports\",\n                supports: m[1].trim(),\n                rules: rules()\n            };\n        }\n    }\n    function at_host() {\n        var m = match(/^@host\\s*/);\n        if (m) {\n            return {\n                type: \"host\",\n                rules: rules()\n            };\n        }\n    }\n    function at_media() {\n        var m = match(/^@media([^{]+)*/);\n        if (m) {\n            return {\n                type: \"media\",\n                media: (m[1] || \"\").trim(),\n                rules: rules()\n            };\n        }\n    }\n    function at_custom_m() {\n        var m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) {\n            return {\n                type: \"custom-media\",\n                name: m[1].trim(),\n                media: m[2].trim()\n            };\n        }\n    }\n    function at_document() {\n        var m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (m) {\n            return {\n                type: \"document\",\n                document: m[2].trim(),\n                vendor: m[1] ? m[1].trim() : null,\n                rules: rules()\n            };\n        }\n    }\n    function at_x() {\n        var m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) {\n            return {\n                type: m[1],\n                name: m[2].trim()\n            };\n        }\n    }\n    function at_rule() {\n        whitespace();\n        if (css[0] === \"@\") {\n            var ret = at_x() || at_fontface() || at_media() || at_keyframes() || at_supports() || at_document() || at_custom_m() || at_host() || at_page() || at_page_margin_box();\n            if (ret && !settings.preserveStatic) {\n                var hasVarFunc = false;\n                if (ret.declarations) {\n                    hasVarFunc = ret.declarations.some((function(decl) {\n                        return /var\\(/.test(decl.value);\n                    }));\n                } else {\n                    var arr = ret.keyframes || ret.rules || [];\n                    hasVarFunc = arr.some((function(obj) {\n                        return (obj.declarations || []).some((function(decl) {\n                            return /var\\(/.test(decl.value);\n                        }));\n                    }));\n                }\n                return hasVarFunc ? ret : {};\n            }\n            return ret;\n        }\n    }\n    function rule() {\n        if (!settings.preserveStatic) {\n            var balancedMatch$1 = balancedMatch(\"{\", \"}\", css);\n            if (balancedMatch$1) {\n                var hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch$1.pre) && /--\\S*\\s*:/.test(balancedMatch$1.body);\n                var hasVarFunc = /var\\(/.test(balancedMatch$1.body);\n                if (!hasVarDecl && !hasVarFunc) {\n                    css = css.slice(balancedMatch$1.end + 1);\n                    return {};\n                }\n            }\n        }\n        var sel = selector() || [];\n        var decls = settings.preserveStatic ? declarations() : declarations().filter((function(decl) {\n            var hasVarDecl = sel.some((function(s) {\n                return /:(?:root|host)(?![.:#(])/.test(s);\n            })) && /^--\\S/.test(decl.property);\n            var hasVarFunc = /var\\(/.test(decl.value);\n            return hasVarDecl || hasVarFunc;\n        }));\n        if (!sel.length) {\n            error(\"selector missing\");\n        }\n        return {\n            type: \"rule\",\n            selectors: sel,\n            declarations: decls\n        };\n    }\n    function rules(core) {\n        if (!core && !open()) {\n            return error(\"missing '{'\");\n        }\n        var node;\n        var rules = comments();\n        while (css.length && (core || css[0] !== \"}\") && (node = at_rule() || rule())) {\n            if (node.type) {\n                rules.push(node);\n            }\n            rules = rules.concat(comments());\n        }\n        if (!core && !close()) {\n            return error(\"missing '}'\");\n        }\n        return rules;\n    }\n    return {\n        type: \"stylesheet\",\n        stylesheet: {\n            rules: rules(true),\n            errors: errors\n        }\n    };\n}\n\nfunction parseVars(cssData) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var defaults = {\n        parseHost: false,\n        store: {},\n        onWarning: function onWarning() {}\n    };\n    var settings = _extends({}, defaults, options);\n    var reVarDeclSelectors = new RegExp(\":\".concat(settings.parseHost ? \"host\" : \"root\", \"$\"));\n    if (typeof cssData === \"string\") {\n        cssData = parseCss(cssData, settings);\n    }\n    cssData.stylesheet.rules.forEach((function(rule) {\n        if (rule.type !== \"rule\" || !rule.selectors.some((function(s) {\n            return reVarDeclSelectors.test(s);\n        }))) {\n            return;\n        }\n        rule.declarations.forEach((function(decl, i) {\n            var prop = decl.property;\n            var value = decl.value;\n            if (prop && prop.indexOf(\"--\") === 0) {\n                settings.store[prop] = value;\n            }\n        }));\n    }));\n    return settings.store;\n}\n\nfunction stringifyCss(tree) {\n    var delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var cb = arguments.length > 2 ? arguments[2] : undefined;\n    var renderMethods = {\n        charset: function charset(node) {\n            return \"@charset \" + node.name + \";\";\n        },\n        comment: function comment(node) {\n            return node.comment.indexOf(\"__CSSVARSPONYFILL\") === 0 ? \"/*\" + node.comment + \"*/\" : \"\";\n        },\n        \"custom-media\": function customMedia(node) {\n            return \"@custom-media \" + node.name + \" \" + node.media + \";\";\n        },\n        declaration: function declaration(node) {\n            return node.property + \":\" + node.value + \";\";\n        },\n        document: function document(node) {\n            return \"@\" + (node.vendor || \"\") + \"document \" + node.document + \"{\" + visit(node.rules) + \"}\";\n        },\n        \"font-face\": function fontFace(node) {\n            return \"@font-face\" + \"{\" + visit(node.declarations) + \"}\";\n        },\n        host: function host(node) {\n            return \"@host\" + \"{\" + visit(node.rules) + \"}\";\n        },\n        import: function _import(node) {\n            return \"@import \" + node.name + \";\";\n        },\n        keyframe: function keyframe(node) {\n            return node.values.join(\",\") + \"{\" + visit(node.declarations) + \"}\";\n        },\n        keyframes: function keyframes(node) {\n            return \"@\" + (node.vendor || \"\") + \"keyframes \" + node.name + \"{\" + visit(node.keyframes) + \"}\";\n        },\n        media: function media(node) {\n            return \"@media \" + node.media + \"{\" + visit(node.rules) + \"}\";\n        },\n        namespace: function namespace(node) {\n            return \"@namespace \" + node.name + \";\";\n        },\n        page: function page(node) {\n            return \"@page \" + (node.selectors.length ? node.selectors.join(\", \") : \"\") + \"{\" + visit(node.declarations) + \"}\";\n        },\n        \"page-margin-box\": function pageMarginBox(node) {\n            return \"@\" + node.name + \"{\" + visit(node.declarations) + \"}\";\n        },\n        rule: function rule(node) {\n            var decls = node.declarations;\n            if (decls.length) {\n                return node.selectors.join(\",\") + \"{\" + visit(decls) + \"}\";\n            }\n        },\n        supports: function supports(node) {\n            return \"@supports \" + node.supports + \"{\" + visit(node.rules) + \"}\";\n        }\n    };\n    function visit(nodes) {\n        var buf = \"\";\n        for (var i = 0; i < nodes.length; i++) {\n            var n = nodes[i];\n            if (cb) {\n                cb(n);\n            }\n            var txt = renderMethods[n.type](n);\n            if (txt) {\n                buf += txt;\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n        return buf;\n    }\n    return visit(tree.stylesheet.rules);\n}\n\nfunction walkCss(node, fn) {\n    node.rules.forEach((function(rule) {\n        if (rule.rules) {\n            walkCss(rule, fn);\n            return;\n        }\n        if (rule.keyframes) {\n            rule.keyframes.forEach((function(keyframe) {\n                if (keyframe.type === \"keyframe\") {\n                    fn(keyframe.declarations, rule);\n                }\n            }));\n            return;\n        }\n        if (!rule.declarations) {\n            return;\n        }\n        fn(rule.declarations, node);\n    }));\n}\n\nvar VAR_PROP_IDENTIFIER = \"--\";\n\nvar VAR_FUNC_IDENTIFIER = \"var\";\n\nfunction transformCss(cssData) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var defaults = {\n        preserveStatic: true,\n        preserveVars: false,\n        variables: {},\n        onWarning: function onWarning() {}\n    };\n    var settings = _extends({}, defaults, options);\n    if (typeof cssData === \"string\") {\n        cssData = parseCss(cssData, settings);\n    }\n    walkCss(cssData.stylesheet, (function(declarations, node) {\n        for (var i = 0; i < declarations.length; i++) {\n            var decl = declarations[i];\n            var type = decl.type;\n            var prop = decl.property;\n            var value = decl.value;\n            if (type !== \"declaration\") {\n                continue;\n            }\n            if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                declarations.splice(i, 1);\n                i--;\n                continue;\n            }\n            if (value.indexOf(VAR_FUNC_IDENTIFIER + \"(\") !== -1) {\n                var resolvedValue = resolveValue(value, settings);\n                if (resolvedValue !== decl.value) {\n                    resolvedValue = fixNestedCalc(resolvedValue);\n                    if (!settings.preserveVars) {\n                        decl.value = resolvedValue;\n                    } else {\n                        declarations.splice(i, 0, {\n                            type: type,\n                            property: prop,\n                            value: resolvedValue\n                        });\n                        i++;\n                    }\n                }\n            }\n        }\n    }));\n    return stringifyCss(cssData);\n}\n\nfunction fixNestedCalc(value) {\n    var reCalcVal = /calc\\(([^)]+)\\)/g;\n    (value.match(reCalcVal) || []).forEach((function(match) {\n        var newVal = \"calc\".concat(match.split(\"calc\").join(\"\"));\n        value = value.replace(match, newVal);\n    }));\n    return value;\n}\n\nfunction resolveValue(value) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var __recursiveFallback = arguments.length > 2 ? arguments[2] : undefined;\n    if (value.indexOf(\"var(\") === -1) {\n        return value;\n    }\n    var valueData = balancedMatch(\"(\", \")\", value);\n    function resolveFunc(value) {\n        var name = value.split(\",\")[0].replace(/[\\s\\n\\t]/g, \"\");\n        var fallback = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        var match = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : undefined;\n        var replacement = match || (fallback ? String(fallback) : undefined);\n        var unresolvedFallback = __recursiveFallback || value;\n        if (!match) {\n            settings.onWarning('variable \"'.concat(name, '\" is undefined'));\n        }\n        if (replacement && replacement !== \"undefined\" && replacement.length > 0) {\n            return resolveValue(replacement, settings, unresolvedFallback);\n        } else {\n            return \"var(\".concat(unresolvedFallback, \")\");\n        }\n    }\n    if (!valueData) {\n        if (value.indexOf(\"var(\") !== -1) {\n            settings.onWarning('missing closing \")\" in the value \"'.concat(value, '\"'));\n        }\n        return value;\n    } else if (valueData.pre.slice(-3) === \"var\") {\n        var isEmptyVarFunc = valueData.body.trim().length === 0;\n        if (isEmptyVarFunc) {\n            settings.onWarning(\"var() must contain a non-whitespace string\");\n            return value;\n        } else {\n            return valueData.pre.slice(0, -3) + resolveFunc(valueData.body) + resolveValue(valueData.post, settings);\n        }\n    } else {\n        return valueData.pre + \"(\".concat(resolveValue(valueData.body, settings), \")\") + resolveValue(valueData.post, settings);\n    }\n}\n\nvar isBrowser = typeof window !== \"undefined\";\n\nvar isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports(\"(--a: 0)\");\n\nvar counters = {\n    group: 0,\n    job: 0\n};\n\nvar defaults = {\n    rootElement: isBrowser ? document : null,\n    shadowDOM: false,\n    include: \"style,link[rel=stylesheet]\",\n    exclude: \"\",\n    variables: {},\n    onlyLegacy: true,\n    preserveStatic: true,\n    preserveVars: false,\n    silent: false,\n    updateDOM: true,\n    updateURLs: true,\n    watch: null,\n    onBeforeSend: function onBeforeSend() {},\n    onError: function onError() {},\n    onWarning: function onWarning() {},\n    onSuccess: function onSuccess() {},\n    onComplete: function onComplete() {},\n    onFinally: function onFinally() {}\n};\n\nvar regex = {\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    cssMediaQueries: /@media[^{]+\\{([\\s\\S]+?})\\s*}/g,\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^}]*})/g,\n    cssVarDecls: /(?:[\\s;]*)(-{2}\\w[\\w-]*)(?:\\s*:\\s*)([^;]*);/g,\n    cssVarFunc: /var\\(\\s*--[\\w-]/,\n    cssVars: /(?:(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\n\nvar variableStore = {\n    dom: {},\n    job: {},\n    user: {}\n};\n\nvar cssVarsIsRunning = false;\n\nvar cssVarsObserver = null;\n\nvar cssVarsSrcNodeCount = 0;\n\nvar debounceTimer = null;\n\nvar isShadowDOMReady = false;\n\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if relative url()\n *                   paths will be converted to absolute urls in external CSS\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) an array of\n *                   output <style> node references that have been appended to\n *                   the DOM, 3) an object containing all custom properies names\n *                   and values, and 4) the ponyfill execution time in\n *                   milliseconds.\n * @param {function} [options.onFinally] Callback in modern and legacy browsers\n *                   after the ponyfill has finished all tasks. Passes 1) a\n *                   boolean indicating if the last ponyfill call resulted in a\n *                   style change, 2) a boolean indicating if the current\n *                   browser provides native support for CSS custom properties,\n *                   and 3) the ponyfill execution time in milliseconds.\n * @example\n *\n *   cssVars({\n *     rootElement   : document,\n *     shadowDOM     : false,\n *     include       : 'style,link[rel=\"stylesheet\"]',\n *     exclude       : '',\n *     variables     : {},\n *     onlyLegacy    : true,\n *     preserveStatic: true,\n *     preserveVars  : false,\n *     silent        : false,\n *     updateDOM     : true,\n *     updateURLs    : true,\n *     watch         : false,\n *     onBeforeSend(xhr, node, url) {},\n *     onError(message, node, xhr, url) {},\n *     onWarning(message) {},\n *     onSuccess(cssText, node, url) {},\n *     onComplete(cssText, styleNode, cssVariables, benchmark) {},\n *     onFinally(hasChanged, hasNativeSupport, benchmark)\n *   });\n */ function cssVars() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var msgPrefix = \"cssVars(): \";\n    var settings = _extends({}, defaults, options);\n    function handleError(message, sourceNode, xhr, url) {\n        if (!settings.silent && window.console) {\n            console.error(\"\".concat(msgPrefix).concat(message, \"\\n\"), sourceNode);\n        }\n        settings.onError(message, sourceNode, xhr, url);\n    }\n    function handleWarning(message) {\n        if (!settings.silent && window.console) {\n            console.warn(\"\".concat(msgPrefix).concat(message));\n        }\n        settings.onWarning(message);\n    }\n    function handleFinally(hasChanged) {\n        settings.onFinally(Boolean(hasChanged), isNativeSupport, getTimeStamp() - settings.__benchmark);\n    }\n    if (!isBrowser) {\n        return;\n    }\n    if (settings.watch) {\n        settings.watch = defaults.watch;\n        addMutationObserver(settings);\n        cssVars(settings);\n        return;\n    } else if (settings.watch === false && cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n    if (!settings.__benchmark) {\n        if (cssVarsIsRunning === settings.rootElement) {\n            cssVarsDebounced(options);\n            return;\n        }\n        var srcNodes = [].slice.call(settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])'));\n        settings.__benchmark = getTimeStamp();\n        settings.exclude = [ cssVarsObserver ? '[data-cssvars]:not([data-cssvars=\"\"])' : '[data-cssvars=\"out\"]', \"link[disabled]:not([data-cssvars])\", settings.exclude ].filter((function(selector) {\n            return selector;\n        })).join(\",\");\n        settings.variables = fixVarNames(settings.variables);\n        srcNodes.forEach((function(srcNode) {\n            var hasStyleCache = srcNode.nodeName.toLowerCase() === \"style\" && srcNode.__cssVars.text;\n            var hasStyleChanged = hasStyleCache && srcNode.textContent !== srcNode.__cssVars.text;\n            if (hasStyleCache && hasStyleChanged) {\n                srcNode.sheet && (srcNode.sheet.disabled = false);\n                srcNode.setAttribute(\"data-cssvars\", \"\");\n            }\n        }));\n        if (!cssVarsObserver) {\n            var outNodes = [].slice.call(settings.rootElement.querySelectorAll('[data-cssvars=\"out\"]'));\n            outNodes.forEach((function(outNode) {\n                var dataGroup = outNode.getAttribute(\"data-cssvars-group\");\n                var srcNode = dataGroup ? settings.rootElement.querySelector('[data-cssvars=\"src\"][data-cssvars-group=\"'.concat(dataGroup, '\"]')) : null;\n                if (!srcNode) {\n                    outNode.parentNode.removeChild(outNode);\n                }\n            }));\n            if (cssVarsSrcNodeCount && srcNodes.length < cssVarsSrcNodeCount) {\n                cssVarsSrcNodeCount = srcNodes.length;\n                variableStore.dom = {};\n            }\n        }\n    }\n    if (document.readyState !== \"loading\") {\n        if (isNativeSupport && settings.onlyLegacy) {\n            var hasVarChange = false;\n            if (settings.updateDOM) {\n                var targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n                Object.keys(settings.variables).forEach((function(key) {\n                    var varValue = settings.variables[key];\n                    hasVarChange = hasVarChange || varValue !== getComputedStyle(targetElm).getPropertyValue(key);\n                    targetElm.style.setProperty(key, varValue);\n                }));\n            }\n            handleFinally(hasVarChange);\n        } else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {\n            getCssData({\n                rootElement: defaults.rootElement,\n                include: defaults.include,\n                exclude: settings.exclude,\n                skipDisabled: false,\n                onSuccess: function onSuccess(cssText, node, url) {\n                    var isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;\n                    if (isUserDisabled) {\n                        return false;\n                    }\n                    cssText = cssText.replace(regex.cssComments, \"\").replace(regex.cssMediaQueries, \"\");\n                    cssText = (cssText.match(regex.cssVarDeclRules) || []).join(\"\");\n                    return cssText || false;\n                },\n                onComplete: function onComplete(cssText, cssArray, nodeArray) {\n                    parseVars(cssText, {\n                        store: variableStore.dom,\n                        onWarning: handleWarning\n                    });\n                    isShadowDOMReady = true;\n                    cssVars(settings);\n                }\n            });\n        } else {\n            cssVarsIsRunning = settings.rootElement;\n            getCssData({\n                rootElement: settings.rootElement,\n                include: settings.include,\n                exclude: settings.exclude,\n                skipDisabled: false,\n                onBeforeSend: settings.onBeforeSend,\n                onError: function onError(xhr, node, url) {\n                    var responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    var statusText = xhr.statusText ? \"(\".concat(xhr.statusText, \")\") : \"Unspecified Error\" + (xhr.status === 0 ? \" (possibly CORS related)\" : \"\");\n                    var errorMsg = \"CSS XHR Error: \".concat(responseUrl, \" \").concat(xhr.status, \" \").concat(statusText);\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onSuccess: function onSuccess(cssText, node, url) {\n                    var isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;\n                    if (isUserDisabled) {\n                        return false;\n                    }\n                    var isLink = node.nodeName.toLowerCase() === \"link\";\n                    var isStyleImport = node.nodeName.toLowerCase() === \"style\" && cssText !== node.textContent;\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n                    if (settings.updateURLs && (isLink || isStyleImport)) {\n                        cssText = fixRelativeCssUrls(cssText, url);\n                    }\n                    return cssText;\n                },\n                onComplete: function onComplete(cssText, cssArray) {\n                    var nodeArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n                    var currentVars = _extends({}, variableStore.dom, variableStore.user);\n                    var hasVarChange = false;\n                    variableStore.job = {};\n                    nodeArray.forEach((function(node, i) {\n                        var nodeCSS = cssArray[i];\n                        node.__cssVars = node.__cssVars || {};\n                        node.__cssVars.text = nodeCSS;\n                        if (regex.cssVars.test(nodeCSS)) {\n                            try {\n                                var cssTree = parseCss(nodeCSS, {\n                                    preserveStatic: settings.preserveStatic,\n                                    removeComments: true\n                                });\n                                parseVars(cssTree, {\n                                    parseHost: Boolean(settings.rootElement.host),\n                                    store: variableStore.dom,\n                                    onWarning: handleWarning\n                                });\n                                node.__cssVars.tree = cssTree;\n                            } catch (err) {\n                                handleError(err.message, node);\n                            }\n                        }\n                    }));\n                    _extends(variableStore.job, variableStore.dom);\n                    if (settings.updateDOM) {\n                        _extends(variableStore.user, settings.variables);\n                        _extends(variableStore.job, variableStore.user);\n                    } else {\n                        _extends(variableStore.job, variableStore.user, settings.variables);\n                        _extends(currentVars, settings.variables);\n                    }\n                    hasVarChange = counters.job > 0 && Boolean(Object.keys(variableStore.job).length > Object.keys(currentVars).length || Boolean(Object.keys(currentVars).length && Object.keys(variableStore.job).some((function(key) {\n                        return variableStore.job[key] !== currentVars[key];\n                    }))));\n                    if (hasVarChange) {\n                        resetCssNodes(settings.rootElement);\n                        cssVars(settings);\n                    } else {\n                        var outCssArray = [];\n                        var outNodeArray = [];\n                        var hasKeyframesWithVars = false;\n                        if (settings.updateDOM) {\n                            counters.job++;\n                        }\n                        nodeArray.forEach((function(node, i) {\n                            var isSkip = !node.__cssVars.tree;\n                            if (node.__cssVars.tree) {\n                                try {\n                                    transformCss(node.__cssVars.tree, _extends({}, settings, {\n                                        variables: variableStore.job,\n                                        onWarning: handleWarning\n                                    }));\n                                    var outCss = stringifyCss(node.__cssVars.tree);\n                                    if (settings.updateDOM) {\n                                        var nodeCSS = cssArray[i];\n                                        var hasCSSVarFunc = regex.cssVarFunc.test(nodeCSS);\n                                        if (!node.getAttribute(\"data-cssvars\")) {\n                                            node.setAttribute(\"data-cssvars\", \"src\");\n                                        }\n                                        if (outCss.length && hasCSSVarFunc) {\n                                            var dataGroup = node.getAttribute(\"data-cssvars-group\") || ++counters.group;\n                                            var outCssNoSpaces = outCss.replace(/\\s/g, \"\");\n                                            var outNode = settings.rootElement.querySelector('[data-cssvars=\"out\"][data-cssvars-group=\"'.concat(dataGroup, '\"]')) || document.createElement(\"style\");\n                                            hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);\n                                            if (settings.preserveStatic) {\n                                                node.sheet && (node.sheet.disabled = true);\n                                            }\n                                            if (!outNode.hasAttribute(\"data-cssvars\")) {\n                                                outNode.setAttribute(\"data-cssvars\", \"out\");\n                                            }\n                                            if (outCssNoSpaces === node.textContent.replace(/\\s/g, \"\")) {\n                                                isSkip = true;\n                                                if (outNode && outNode.parentNode) {\n                                                    node.removeAttribute(\"data-cssvars-group\");\n                                                    outNode.parentNode.removeChild(outNode);\n                                                }\n                                            } else if (outCssNoSpaces !== outNode.textContent.replace(/\\s/g, \"\")) {\n                                                [ node, outNode ].forEach((function(n) {\n                                                    n.setAttribute(\"data-cssvars-job\", counters.job);\n                                                    n.setAttribute(\"data-cssvars-group\", dataGroup);\n                                                }));\n                                                outNode.textContent = outCss;\n                                                outCssArray.push(outCss);\n                                                outNodeArray.push(outNode);\n                                                if (!outNode.parentNode) {\n                                                    node.parentNode.insertBefore(outNode, node.nextSibling);\n                                                }\n                                            }\n                                        }\n                                    } else {\n                                        if (node.textContent.replace(/\\s/g, \"\") !== outCss) {\n                                            outCssArray.push(outCss);\n                                        }\n                                    }\n                                } catch (err) {\n                                    handleError(err.message, node);\n                                }\n                            }\n                            if (isSkip) {\n                                node.setAttribute(\"data-cssvars\", \"skip\");\n                            }\n                            if (!node.hasAttribute(\"data-cssvars-job\")) {\n                                node.setAttribute(\"data-cssvars-job\", counters.job);\n                            }\n                        }));\n                        cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])').length;\n                        if (settings.shadowDOM) {\n                            var elms = [].concat(settings.rootElement).concat([].slice.call(settings.rootElement.querySelectorAll(\"*\")));\n                            for (var i = 0, elm; elm = elms[i]; ++i) {\n                                if (elm.shadowRoot && elm.shadowRoot.querySelector(\"style\")) {\n                                    var shadowSettings = _extends({}, settings, {\n                                        rootElement: elm.shadowRoot\n                                    });\n                                    cssVars(shadowSettings);\n                                }\n                            }\n                        }\n                        if (settings.updateDOM && hasKeyframesWithVars) {\n                            fixKeyframes(settings.rootElement);\n                        }\n                        cssVarsIsRunning = false;\n                        settings.onComplete(outCssArray.join(\"\"), outNodeArray, JSON.parse(JSON.stringify(variableStore.job)), getTimeStamp() - settings.__benchmark);\n                        handleFinally(outNodeArray.length);\n                    }\n                }\n            });\n        }\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", (function init(evt) {\n            cssVars(options);\n            document.removeEventListener(\"DOMContentLoaded\", init);\n        }));\n    }\n}\n\ncssVars.reset = function() {\n    counters.job = 0;\n    counters.group = 0;\n    cssVarsIsRunning = false;\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n    cssVarsSrcNodeCount = 0;\n    debounceTimer = null;\n    isShadowDOMReady = false;\n    for (var prop in variableStore) {\n        variableStore[prop] = {};\n    }\n};\n\nfunction addMutationObserver(settings) {\n    function isDisabled(node) {\n        var isDisabledAttr = isLink(node) && node.hasAttribute(\"disabled\");\n        var isDisabledSheet = (node.sheet || {}).disabled;\n        return isDisabledAttr || isDisabledSheet;\n    }\n    function isLink(node) {\n        var isStylesheet = node.nodeName.toLowerCase() === \"link\" && (node.getAttribute(\"rel\") || \"\").indexOf(\"stylesheet\") !== -1;\n        return isStylesheet;\n    }\n    function isStyle(node) {\n        return node.nodeName.toLowerCase() === \"style\";\n    }\n    function isValidAttributeMutation(mutation) {\n        var isValid = false;\n        if (mutation.type === \"attributes\" && isLink(mutation.target) && !isDisabled(mutation.target)) {\n            var isEnabledMutation = mutation.attributeName === \"disabled\";\n            var isHrefMutation = mutation.attributeName === \"href\";\n            var isSkipNode = mutation.target.getAttribute(\"data-cssvars\") === \"skip\";\n            var isSrcNode = mutation.target.getAttribute(\"data-cssvars\") === \"src\";\n            if (isEnabledMutation) {\n                isValid = !isSkipNode && !isSrcNode;\n            } else if (isHrefMutation) {\n                if (isSkipNode) {\n                    mutation.target.setAttribute(\"data-cssvars\", \"\");\n                } else if (isSrcNode) {\n                    resetCssNodes(settings.rootElement, true);\n                }\n                isValid = true;\n            }\n        }\n        return isValid;\n    }\n    function isValidStyleTextMutation(mutation) {\n        var isValid = false;\n        if (mutation.type === \"childList\") {\n            var isStyleElm = isStyle(mutation.target);\n            var isOutNode = mutation.target.getAttribute(\"data-cssvars\") === \"out\";\n            isValid = isStyleElm && !isOutNode;\n        }\n        return isValid;\n    }\n    function isValidAddMutation(mutation) {\n        var isValid = false;\n        if (mutation.type === \"childList\") {\n            isValid = [].slice.call(mutation.addedNodes).some((function(node) {\n                var isElm = node.nodeType === 1;\n                var hasAttr = isElm && node.hasAttribute(\"data-cssvars\");\n                var isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);\n                var isValid = !hasAttr && (isLink(node) || isStyleWithVars);\n                return isValid && !isDisabled(node);\n            }));\n        }\n        return isValid;\n    }\n    function isValidRemoveMutation(mutation) {\n        var isValid = false;\n        if (mutation.type === \"childList\") {\n            isValid = [].slice.call(mutation.removedNodes).some((function(node) {\n                var isElm = node.nodeType === 1;\n                var isOutNode = isElm && node.getAttribute(\"data-cssvars\") === \"out\";\n                var isSrcNode = isElm && node.getAttribute(\"data-cssvars\") === \"src\";\n                var isValid = isSrcNode;\n                if (isSrcNode || isOutNode) {\n                    var dataGroup = node.getAttribute(\"data-cssvars-group\");\n                    var orphanNode = settings.rootElement.querySelector('[data-cssvars-group=\"'.concat(dataGroup, '\"]'));\n                    if (isSrcNode) {\n                        resetCssNodes(settings.rootElement, true);\n                    }\n                    if (orphanNode) {\n                        orphanNode.parentNode.removeChild(orphanNode);\n                    }\n                }\n                return isValid;\n            }));\n        }\n        return isValid;\n    }\n    if (!window.MutationObserver) {\n        return;\n    }\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n    cssVarsObserver = new MutationObserver((function(mutations) {\n        var hasValidMutation = mutations.some((function(mutation) {\n            return isValidAttributeMutation(mutation) || isValidStyleTextMutation(mutation) || isValidAddMutation(mutation) || isValidRemoveMutation(mutation);\n        }));\n        if (hasValidMutation) {\n            cssVars(settings);\n        }\n    }));\n    cssVarsObserver.observe(document.documentElement, {\n        attributes: true,\n        attributeFilter: [ \"disabled\", \"href\" ],\n        childList: true,\n        subtree: true\n    });\n}\n\nfunction cssVarsDebounced(settings) {\n    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout((function() {\n        settings.__benchmark = null;\n        cssVars(settings);\n    }), delay);\n}\n\nfunction fixKeyframes(rootElement) {\n    var animationNameProp = [ \"animation-name\", \"-moz-animation-name\", \"-webkit-animation-name\" ].filter((function(prop) {\n        return getComputedStyle(document.body)[prop];\n    }))[0];\n    if (animationNameProp) {\n        var allNodes = [].slice.call(rootElement.querySelectorAll(\"*\"));\n        var keyframeNodes = [];\n        var nameMarker = \"__CSSVARSPONYFILL-KEYFRAMES__\";\n        for (var i = 0, len = allNodes.length; i < len; i++) {\n            var node = allNodes[i];\n            var animationName = getComputedStyle(node)[animationNameProp];\n            if (animationName !== \"none\") {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n        void document.body.offsetHeight;\n        for (var _i = 0, _len = keyframeNodes.length; _i < _len; _i++) {\n            var nodeStyle = keyframeNodes[_i].style;\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, \"\");\n        }\n    }\n}\n\nfunction fixRelativeCssUrls(cssText, baseUrl) {\n    var cssUrls = cssText.replace(regex.cssComments, \"\").match(regex.cssUrls) || [];\n    cssUrls.forEach((function(cssUrl) {\n        var oldUrl = cssUrl.replace(regex.cssUrls, \"$1\");\n        var newUrl = getFullUrl(oldUrl, baseUrl);\n        cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n    }));\n    return cssText;\n}\n\nfunction fixVarNames() {\n    var varObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var reLeadingHyphens = /^-{2}/;\n    return Object.keys(varObj).reduce((function(obj, value) {\n        var key = reLeadingHyphens.test(value) ? value : \"--\".concat(value.replace(/^-+/, \"\"));\n        obj[key] = varObj[value];\n        return obj;\n    }), {});\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction getTimeStamp() {\n    return isBrowser && (window.performance || {}).now ? window.performance.now() : (new Date).getTime();\n}\n\nfunction resetCssNodes(rootElement) {\n    var resetDOMVariableStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var resetNodes = [].slice.call(rootElement.querySelectorAll('[data-cssvars=\"skip\"],[data-cssvars=\"src\"]'));\n    resetNodes.forEach((function(node) {\n        return node.setAttribute(\"data-cssvars\", \"\");\n    }));\n    if (resetDOMVariableStore) {\n        variableStore.dom = {};\n    }\n}\n\nexport { cssVars as default };\n//# sourceMappingURL=css-vars-ponyfill.esm.js.map\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","PopStateEventType","createHashHistory","options","getUrlBasedHistory","window","globalHistory","pathname","search","hash","parsePath","location","substr","createLocation","state","usr","to","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","createPath","warning","charAt","JSON","stringify","invariant","value","message","Error","cond","console","warn","e","getHistoryState","index","idx","current","Math","random","toString","_ref","path","parsedPath","searchIndex","getLocation","createHref","validateLocation","defaultView","v5Compat","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","origin","URL","replaceState","listen","fn","addEventListener","removeEventListener","encodeLocation","push","Push","historyState","pushState","error","DOMException","name","replace","Replace","go","n","ResultType","Set","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","every","compareIndexes","routesMeta","map","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","parentPath","flattenRoute","route","relativePath","undefined","caseSensitive","startsWith","joinPaths","concat","children","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","join","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","isRouteErrorResponse","status","statusText","internal","validMutationMethodsArr","validRequestMethodsArr","Symbol","getUrls","urls","settings","mimeType","onBeforeSend","Function","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","x","isValidCss","text","isString","isHTML","trim","xhr","urlIndex","responseText","returnVal","parser","createElement","setAttribute","String","Boolean","all","atob","host","protocol","xdr","XDomainRequest","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","getCssData","regex","cssComments","cssImports","rootElement","include","exclude","skipDisabled","useCSSOM","sourceNodes","querySelectorAll","node","elm","selector","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","cssArray","handleComplete","skipIndices","reverse","skipIndex","arr","splice","cssText","handleSuccess","cssIndex","sourceUrl","resolveImports","resolvedCssText","errorData","data","parseImportData","baseUrl","ignoreRules","importData","rules","rule","absoluteUrls","getFullUrl$1","absoluteRules","oldUrl","newUrl","callbackFn","__errorData","__errorRules","responseImportData","responseArray","importText","linkHref","linkRel","isLink","nodeName","isSkip","disabled","isStyle","substring","sheet","cssRules","_cssText","textContent","d","implementation","createHTMLDocument","head","appendChild","body","baseURI","balancedMatch","balanced","str","maybeMatch","r","range","start","pre","post","reg","m","begs","beg","left","right","ai","bi","parseCss","css","preserveStatic","removeComments","msg","re","exec","close","whitespace","comment","type","comments","c","cmnts","selectorItems","_selector","hasCommaInQuotes","declaration","at_rule","comment_regexp","prop","val","ret","property","declarations","decls","keyframe","vals","values","at_x","at_fontface","media","at_media","vendor","frame","frames","keyframes","at_keyframes","supports","at_supports","at_document","at_custom_m","at_host","selectors","at_page","at_page_margin_box","hasVarFunc","decl","obj","balancedMatch$1","hasVarDecl","sel","core","stylesheet","errors","parseVars","cssData","parseHost","store","onWarning","reVarDeclSelectors","stringifyCss","tree","delim","cb","renderMethods","charset","visit","import","namespace","page","nodes","buf","txt","walkCss","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","transformCss","preserveVars","variables","resolvedValue","resolveValue","fixNestedCalc","newVal","__recursiveFallback","valueData","fallback","replacement","unresolvedFallback","resolveFunc","isBrowser","isNativeSupport","CSS","counters","group","job","defaults","shadowDOM","onlyLegacy","silent","updateDOM","updateURLs","watch","onFinally","cssKeyframes","cssMediaQueries","cssUrls","cssVarDeclRules","cssVarDecls","cssVarFunc","cssVars","variableStore","dom","user","cssVarsIsRunning","cssVarsObserver","cssVarsSrcNodeCount","debounceTimer","isShadowDOMReady","msgPrefix","handleError","sourceNode","handleWarning","handleFinally","hasChanged","getTimeStamp","__benchmark","isDisabled","isDisabledAttr","hasAttribute","isDisabledSheet","isValidAttributeMutation","mutation","isValid","isEnabledMutation","attributeName","isHrefMutation","isSkipNode","isSrcNode","resetCssNodes","isValidStyleTextMutation","isStyleElm","isOutNode","isValidAddMutation","addedNodes","hasAttr","nodeType","isStyleWithVars","isValidRemoveMutation","removedNodes","isElm","dataGroup","orphanNode","parentNode","removeChild","MutationObserver","disconnect","mutations","observe","documentElement","attributes","attributeFilter","childList","subtree","addMutationObserver","delay","clearTimeout","cssVarsDebounced","srcNodes","varObj","reLeadingHyphens","keys","fixVarNames","srcNode","hasStyleCache","__cssVars","hasStyleChanged","outNode","hasVarChange","targetElm","varValue","getComputedStyle","getPropertyValue","style","setProperty","shadowRoot","nodeArray","responseUrl","responseURL","getFullUrl","isStyleImport","cssUrl","fixRelativeCssUrls","currentVars","nodeCSS","cssTree","outCssArray","outNodeArray","hasKeyframesWithVars","outCss","hasCSSVarFunc","outCssNoSpaces","removeAttribute","insertBefore","nextSibling","elms","animationNameProp","allNodes","keyframeNodes","nameMarker","len","offsetHeight","_i","_len","nodeStyle","fixKeyframes","parse","init","evt","performance","now","Date","getTime","resetDOMVariableStore","reset","f","g","h","k","w","C","sortIndex","id","l","exports","unstable_now","p","q","t","u","v","y","z","A","B","D","E","F","setImmediate","G","callback","startTime","expirationTime","H","I","J","K","L","M","priorityLevel","navigator","scheduling","isInputPending","S","N","O","P","Q","R","MessageChannel","T","U","port2","port1","onmessage","postMessage","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_Profiling","unstable_UserBlockingPriority","unstable_cancelCallback","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getCurrentPriorityLevel","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_requestPaint","unstable_runWithPriority","unstable_scheduleCallback","unstable_shouldYield","unstable_wrapCallback","module"],"sourceRoot":""}