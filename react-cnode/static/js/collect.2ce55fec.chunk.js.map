{"version":3,"sources":["service/config.js","service/fetch.js","service/index.js","store/actions/collect.js","page/collect/index.js"],"names":["development","api","production","getService","serviceUrl","axios","defaults","baseURL","config","get","url","params","header","Promise","resolve","reject","then","res","catch","err","post","data","qs","Qs","stringify","headers","timeout","interceptors","request","use","loading","error","response","hide","status","getTopics","getDetails","id","login","user","username","collect","de_collect","myCollect","messages","markOne","setCollect","flag","type","types","setOrCancelCollect","dispatch","getState","details","is_collect","Ajax","success","getUserCollects","Collect","memo","topics","useEffect","getUrl","style","padding","connect","state","collects"],"mappings":"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","file":"static/js/collect.2ce55fec.chunk.js","sourcesContent":["/*\r\n * @Author: hejp\r\n * @Date:   16:26\r\n * @Last Modified by:   hejp\r\n * @Last Modified time: 16:26\r\n */\r\nexport default {\r\n    development: {\r\n        api: 'https://cnodejs.org/api/v1'\r\n    },\r\n    production: {\r\n        api: 'https://cnodejs.org/api/v1'\r\n    }\r\n}\r\n","/*\r\n * @Author: hejp\r\n * @Date:   10:39\r\n * @Last Modified by:   hejp\r\n * @Last Modified time: 10:39\r\n */\r\nimport axios from 'axios'\r\nimport config from './config'\r\nimport Qs from 'qs'\r\nimport { Toast } from 'antd-mobile'\r\nconst ENV = process.env.NODE_ENV;\r\n\r\nconst getService = (serviceUrl) => {\r\n    // 环境切换(开发，正式环境)\r\n    if (ENV === 'development') {\r\n        axios.defaults.baseURL = config.development[serviceUrl]\r\n    } else if (ENV === 'production') {\r\n        // production, online\r\n        axios.defaults.baseURL = config.production[serviceUrl]\r\n    }\r\n}\r\n// 请求超时\r\naxios.defaults.timeout = 60000\r\n\r\n// post 请求头的设置\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'\r\n\r\n// 请求拦截器\r\naxios.interceptors.request.use(\r\n    config => {\r\n        Toast.loading('loading...', 0)\r\n        // document.getElementById('js_loading').style.display = 'block';\r\n        return config\r\n    },\r\n    error => {\r\n        return Promise.error(error)\r\n    }\r\n)\r\n\r\n// 响应拦截器\r\naxios.interceptors.response.use(\r\n    response => {\r\n        // document.getElementById('js_loading').style.display = 'none'\r\n        Toast.hide()\r\n        if (response.status === 200) {\r\n            return Promise.resolve(response.data)\r\n        } else {\r\n            return Promise.reject(response)\r\n        }\r\n    },\r\n    error => {\r\n        // document.getElementById('js_loading').style.display = 'none'\r\n        Toast.hide()\r\n        let response = error.response\r\n        if (!response) {\r\n            return Promise.reject(error)\r\n        }\r\n        let code = response.status\r\n        if (code) {\r\n            switch (code) {\r\n                case 401:\r\n                    break\r\n                // token过期\r\n                case 403:\r\n                    break\r\n                // 404请求不存在\r\n                case 404:\r\n                    break\r\n                case 500:\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n/**\r\n * get方法\r\n * @param url [请求的url地址]\r\n * @param params [请求的参数]\r\n * @returns {Promise<any>}\r\n */\r\nexport function get (url, params, serviceUrl, header) {\r\n    if (serviceUrl) {\r\n        getService(serviceUrl)\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url, {\r\n            params: params,\r\n            header: header\r\n        }).then(res => {\r\n            resolve(res)\r\n        }).catch(err => {\r\n            reject(err)\r\n        })\r\n    })\r\n}\r\n/**\r\n * post方法\r\n * @param url [请求的url地址]\r\n * @param params [请求的参数]\r\n * @returns {Promise<any>}\r\n */\r\nexport function post (url, params, serviceUrl, header, data, qs = true) {\r\n    if (serviceUrl) {\r\n        getService(serviceUrl)\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(url,\r\n            qs ? Qs.stringify(params) : params,\r\n            {\r\n                headers: header ? header : {\r\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n                }\r\n            },\r\n            data\r\n            ).then(res => {\r\n            resolve(res)\r\n        }).catch(err => {\r\n            reject(err)\r\n        })\r\n    })\r\n}\r\n","/*\r\n * @Author: hejp\r\n * @Date:   16:43\r\n * @Last Modified by:   hejp\r\n * @Last Modified time: 16:43\r\n */\r\nimport {\r\n    get,\r\n    post\r\n} from './fetch'\r\n\r\nexport default {\r\n    getTopics(params) {\r\n        return get('/topics', params, 'api')\r\n    },\r\n    getDetails(id) {\r\n        return get(`/topic/${id}`, {},'api')\r\n    },\r\n    login(params) {\r\n        return post('/accesstoken', params,'api')\r\n    },\r\n    user(username) {\r\n        return get(`/user/${username}`, '','api')\r\n    },\r\n    collect(params) {\r\n        return post('/topic_collect/collect', params,'api')\r\n    },\r\n    de_collect(params) {\r\n        return post('/topic_collect/de_collect ', params,'api')\r\n    },\r\n    myCollect(username) {\r\n        return get(`/topic_collect/${username}`, '','api')\r\n    },\r\n    messages(params) {\r\n        return get('messages', params,'api')\r\n    },\r\n    markOne(id, params) {\r\n        return post(`/message/mark_one/${id}`, params,'api')\r\n    }\r\n}\r\n","/*\r\n * @Author: hejp\r\n * @Date:   16:12\r\n * @Last Modified by:   hejp\r\n * @Last Modified time: 16:12\r\n */\r\nimport * as types from \"../actionType\";\r\nimport Ajax from \"../../service\";\r\nimport {\r\n    Toast\r\n} from 'antd-mobile'\r\n\r\nconst setCollect = flag => ({\r\n    type: types.SET_COLLECT,\r\n    flag\r\n})\r\nconst collectList = data => ({\r\n    type: types.COLLECT_LIST,\r\n    data\r\n})\r\n\r\n\r\n/**\r\n * 收藏和取消收藏\r\n * @param {*} id\r\n */\r\nexport const setOrCancelCollect = params => (dispatch, getState) => {\r\n    const state = getState();\r\n    if (state.details.is_collect) {\r\n        Ajax.de_collect(params)\r\n            .then(() => {\r\n                dispatch(setCollect(false))\r\n                Toast.success('取消收藏成功', 1.5)\r\n            })\r\n    } else {\r\n        Ajax.collect(params)\r\n            .then(() => {\r\n                dispatch(setCollect(true))\r\n                Toast.success('收藏成功', 1.5)\r\n            })\r\n    }\r\n}\r\n\r\n/**\r\n * 我的收藏列表\r\n * @param {*} id\r\n */\r\nexport const getUserCollects = username => dispatch => {\r\n    Ajax.myCollect(username)\r\n        .then(res => {\r\n            if (res.success) {\r\n                dispatch(collectList(res.data))\r\n            }\r\n        })\r\n}\r\n","/*\r\n * @Author: hejp\r\n * @Date:   16:05\r\n * @Last Modified by:   hejp\r\n * @Last Modified time: 16:05\r\n */\r\nimport React, {\r\n    memo,\r\n    useEffect\r\n} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getUserCollects\r\n} from '../../store/actions/collect'\r\nimport TopicsList from '../../components/topics/TopicsList'\r\nimport {\r\n    getUrl\r\n} from '../../util'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Collect = memo(({getUserCollects, topics }) => {\r\n    useEffect(() => {\r\n        getUserCollects(getUrl('username'))\r\n    }, [])\r\n    return (\r\n        <TopicsList topics={topics} style={{\r\n            padding: 0\r\n        }} />\r\n    )\r\n})\r\nCollect.propTypes = {\r\n    topics: PropTypes.array.isRequired,\r\n    getUserCollects: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nconst collectState = state => ({\r\n    topics: state.collects\r\n})\r\n\r\nexport default connect(\r\n    collectState,\r\n    {\r\n        getUserCollects\r\n    }\r\n)(Collect)\r\n\r\n"],"sourceRoot":""}