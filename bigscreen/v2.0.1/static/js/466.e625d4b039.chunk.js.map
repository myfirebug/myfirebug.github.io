{"version":3,"file":"static/js/466.e625d4b039.chunk.js","mappings":"sPAMA,MAJuB,CACrBA,SCDkC,CAClCC,KAAM,kBACNC,KAAM,OACNC,KAAM,QAENC,eAAgB,CACdC,aAAc,QACdC,iBAAkB,EAClBC,iBAAkB,EAClBC,iBAAkB,EAClBC,iBAAkB,GCVlBC,eAAe,EACfC,gBAAiB,EACjBC,gBAAiB,EACjBC,gBAAiB,EACjBC,gBAAiB,GACjBC,iBAAkB,OAClBC,iBAAkB,EAClBC,iBAAkB,GAClBC,yBAA0B,EAC1BC,0BAA2B,EAC3BC,4BAA6B,EAC7BC,6BAA8B,ECX9BC,cAAe,GACfC,mBAAoB,EACpBC,gBAAiB,SACjBC,eAAgB,SAChBC,qBAAsB,GACtBC,gBAAiB,kBACjBC,gBAAiB,EACjBC,WAAY,QFQdC,gBAAiB,CACfC,KAAM,EACNC,IAAK,EACLC,MAAO,IACPC,OAAQ,IAGVC,UGtBgB,CACdC,cAAc,EACdC,SAAU,OACVC,KAAM,CACJC,MAAO,OAETC,IAAK,GACLC,OAAQ,MACRC,MAAO,WCGJ,MAAMC,EAA0B,CACrCC,OAAQ,CACNzC,KAAM,QACNqC,IAAK,GACLK,GAAI,GACJC,WAAY,GACZ5C,KAAM,OACN6C,MAAO,EACPC,EAAG,EACHC,EAAG,EACHC,OAAQ,EACRC,IAAK,EACLC,cAAe,CAAC,EAChBC,SAAU,GACVC,SAAU,IAEZC,eAAWC,EACXF,cAAUE,GAGCC,EAAgB,WAAiD,IAAhDC,EAAKC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAGhB,EAAckB,EAAqBF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EACvE,MAAMM,EAAkBC,KAAKC,MAAMD,KAAKE,UAAUP,IAElD,OADAQ,QAAQC,IAAIT,EAAOG,GACXA,EAAO3D,MAEb,KAAKkE,EAAAA,OAGH,OAFAN,EAAKlB,OAASiB,EAAOQ,KACrBP,EAAKR,SAAWO,EAAOQ,KAAKf,SACrBQ,EAET,KAAKQ,EAAAA,cAKH,OAJAR,EAAKlB,OAAS,IACTkB,EAAKlB,UACLiB,EAAOQ,MAELP,EAET,KAAKS,EAAAA,YAMH,OALAT,EAAKlB,OAAOS,SAASmB,KAAK,IACrBX,EAAOQ,QACPI,EAAeZ,EAAOQ,KAAKK,WAEhCZ,EAAKP,UAAYM,EAAOQ,KAAKd,UACtBO,EAGT,KAAKa,EAAAA,eAOH,OANAb,EAAKlB,OAAOS,SAAWS,EAAKlB,OAAOS,SAASuB,QACzCC,GAASA,EAAKtB,YAAcM,EAAOhB,KAElCgB,EAAOhB,KAAOiB,EAAKP,YACrBO,EAAKP,UAAY,IAEZO,EAGT,KAAKgB,EAAAA,eAAgB,CACnB,MAAMC,EAAQjB,EAAKlB,OAAOS,SAAS2B,WAChCH,GAASA,EAAKtB,YAAcM,EAAOQ,KAAKd,YAM3C,OAJe,IAAXwB,IACFjB,EAAKlB,OAAOS,SAAS0B,GAAS,IAAKlB,EAAOQ,MAC1CP,EAAKP,UAAYM,EAAOQ,KAAKd,WAExBO,CACT,CAEA,KAAKmB,EAAAA,eAEH,OADAnB,EAAKP,UAAYM,EAAOhB,GACjBiB,EAET,QACEI,QAAQC,IAAI,kBAGlB,C,oPCrFO,MAAMC,EAAS,SAITE,EAAgB,gBAIhBC,EAAc,cAIdI,EAAiB,iBAIjBM,EAAiB,iBAIjBH,EAAiB,gB","sources":["webpack://large-screen-configuration/./src/core/config/elements/index.ts","webpack://large-screen-configuration/./src/core/config/elements/text/base.ts","webpack://large-screen-configuration/./src/core/config/base/box.ts","webpack://large-screen-configuration/./src/core/config/base/font.ts","webpack://large-screen-configuration/./src/core/config/base/data.ts","webpack://large-screen-configuration/./src/pages/widgets/edit/store/reducers.ts","webpack://large-screen-configuration/./src/pages/widgets/edit/store/type.ts"],"sourcesContent":["import { baseText } from \"./text\";\r\n\r\nconst elementsConfig = {\r\n  baseText,\r\n};\r\n\r\nexport default elementsConfig;\r\n","import { font, data, box } from \"@src/core/config/base\";\r\n\r\nexport const baseText: IAnyObject = {\r\n  code: \"elementBaseText\",\r\n  type: \"text\",\r\n  name: \"基础文本框\",\r\n  // 配置项值\r\n  configureValue: {\r\n    styleDisplay: \"block\",\r\n    styleTextShadowX: 0,\r\n    styleTextShadowY: 0,\r\n    styleTextShadowF: 0,\r\n    styleTextShadowC: \"\",\r\n    ...box.configureValue,\r\n    ...font.configureValue,\r\n  },\r\n  // 坐标值\r\n  coordinateValue: {\r\n    left: 0,\r\n    top: 0,\r\n    width: 100,\r\n    height: 40,\r\n  },\r\n  // 数据值\r\n  dataValue: data.configureValue,\r\n};\r\n","export const box = {\r\n  configureValue: {\r\n    styleBoxInset: false,\r\n    styleBoxShadowX: 0,\r\n    styleBoxShadowY: 0,\r\n    styleBoxShadowF: 0,\r\n    styleBoxShadowC: \"\",\r\n    styleBorderStyle: \"none\",\r\n    styleBorderWidth: 0,\r\n    styleBorderColor: \"\",\r\n    styleBorderTopLeftRadius: 0,\r\n    styleBorderTopRightRadius: 0,\r\n    styleBorderBottomLeftRadius: 0,\r\n    styleBorderBottomRightRadius: 0,\r\n  },\r\n  configure: [\r\n    {\r\n      name: \"盒子阴影\",\r\n      list: [\r\n        {\r\n          componentName: \"Switch\",\r\n          label: \"内阴影\",\r\n          name: \"styleBoxInset\",\r\n          required: false,\r\n          placeholder: \"\",\r\n        },\r\n        {\r\n          componentName: \"InputNumber\",\r\n          label: \"X轴偏移\",\r\n          name: \"styleBoxShadowX\",\r\n          required: false,\r\n          placeholder: \"请输入X轴偏移\",\r\n        },\r\n        {\r\n          componentName: \"InputNumber\",\r\n          label: \"Y轴偏移\",\r\n          name: \"styleBoxShadowY\",\r\n          required: false,\r\n          placeholder: \"请输入Y轴偏移\",\r\n        },\r\n        {\r\n          componentName: \"InputNumber\",\r\n          label: \"模糊值\",\r\n          name: \"styleBoxShadowF\",\r\n          required: false,\r\n          placeholder: \"请输入模糊值\",\r\n        },\r\n        {\r\n          componentName: \"SketchPicker\",\r\n          label: \"颜色\",\r\n          name: \"styleBoxShadowC\",\r\n          required: false,\r\n          placeholder: \"请选择颜色\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: \"边框\",\r\n      list: [\r\n        {\r\n          componentName: \"Select\",\r\n          label: \"边框样式\",\r\n          name: \"styleBorderStyle\",\r\n          required: false,\r\n          placeholder: \"请选择边框样式\",\r\n          options: [\r\n            { code: \"none\", name: \"无\" },\r\n            { code: \"solid\", name: \"直线\" },\r\n            { code: \"dashed\", name: \"破折线\" },\r\n            { code: \"dotted\", name: \"点状线\" },\r\n            { code: \"double\", name: \"双划线\" },\r\n            { code: \"groove\", name: \"3D凹槽\" },\r\n            { code: \"ridge\", name: \"3D垄状\" },\r\n            { code: \"inset\", name: \"3D内嵌\" },\r\n            { code: \"outset\", name: \"3D外嵌\" },\r\n          ],\r\n        },\r\n        {\r\n          componentName: \"InputNumber\",\r\n          label: \"边框尺寸\",\r\n          name: \"styleBorderWidth\",\r\n          required: false,\r\n          placeholder: \"请输入尺寸\",\r\n        },\r\n        {\r\n          componentName: \"SketchPicker\",\r\n          label: \"颜色\",\r\n          name: \"styleBorderColor\",\r\n          required: false,\r\n          placeholder: \"请选择边框颜色\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: \"圆角\",\r\n      list: [\r\n        {\r\n          componentName: \"InputNumber\",\r\n          label: \"左上\",\r\n          name: \"styleBorderTopLeftRadius\",\r\n          required: false,\r\n          placeholder: \"请输入尺寸\",\r\n        },\r\n        {\r\n          componentName: \"InputNumber\",\r\n          label: \"右上\",\r\n          name: \"styleBorderTopRightRadius\",\r\n          required: false,\r\n          placeholder: \"请输入尺寸\",\r\n        },\r\n        {\r\n          componentName: \"InputNumber\",\r\n          label: \"左下\",\r\n          name: \"styleBorderBottomLeftRadius\",\r\n          required: false,\r\n          placeholder: \"请输入尺寸\",\r\n        },\r\n        {\r\n          componentName: \"InputNumber\",\r\n          label: \"右下\",\r\n          name: \"styleBorderBottomRightRadius\",\r\n          required: false,\r\n          placeholder: \"请输入尺寸\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","export const font = {\r\n  configureValue: {\r\n    styleFontSize: 14,\r\n    styleLetterSpacing: 0,\r\n    styleFontWeight: \"normal\",\r\n    styleTextAlign: \"center\",\r\n    styleBackgroundColor: \"\",\r\n    styleFontFamily: \"Microsoft YaHei\",\r\n    styleLineHeight: 1,\r\n    styleColor: \"#fff\",\r\n  },\r\n  configure: [\r\n    {\r\n      componentName: \"InputNumber\",\r\n      label: \"字体大小\",\r\n      name: \"styleFontSize\",\r\n      required: false,\r\n      min: 12,\r\n      placeholder: \"\",\r\n    },\r\n    {\r\n      componentName: \"InputNumber\",\r\n      label: \"字体间距\",\r\n      name: \"styleLetterSpacing\",\r\n      required: false,\r\n      placeholder: \"\",\r\n    },\r\n    {\r\n      componentName: \"InputNumber\",\r\n      label: \"行高\",\r\n      name: \"styleLineHeight\",\r\n      required: false,\r\n      placeholder: \"\",\r\n    },\r\n    {\r\n      componentName: \"Select\",\r\n      label: \"字体样式\",\r\n      name: \"styleFontFamily\",\r\n      required: false,\r\n      placeholder: \"\",\r\n      options: [\r\n        { code: \"SimSun\", name: \"宋体\" },\r\n        { code: \"KaiTi\", name: \"楷体\" },\r\n        { code: \"Microsoft YaHei\", name: \"微软雅黑\" },\r\n        { code: \"STHeiti\", name: \"华文黑体\" },\r\n        { code: \"arial\", name: \"无衬线体\" },\r\n        { code: \"serif\", name: \"有衬线体\" },\r\n        { code: \"cursive\", name: \"草书\" },\r\n        { code: \"monospace\", name: \"等宽字体\" },\r\n        { code: \"courier\", name: \"打印字体\" },\r\n      ],\r\n    },\r\n    {\r\n      componentName: \"Select\",\r\n      label: \"文字粗细\",\r\n      name: \"styleFontWeight\",\r\n      required: false,\r\n      placeholder: \"\",\r\n      options: [\r\n        { code: \"normal\", name: \"正常\" },\r\n        { code: \"bold\", name: \"粗体\" },\r\n        { code: \"bolder\", name: \"特粗体\" },\r\n        { code: \"lighter\", name: \"细体\" },\r\n      ],\r\n    },\r\n    {\r\n      componentName: \"Select\",\r\n      label: \"对齐方式\",\r\n      name: \"styleTextAlign\",\r\n      required: false,\r\n      placeholder: \"\",\r\n      options: [\r\n        { code: \"center\", name: \"居中\" },\r\n        { code: \"left\", name: \"左对齐\" },\r\n        { code: \"right\", name: \"右对齐\" },\r\n      ],\r\n    },\r\n    {\r\n      componentName: \"SketchPicker\",\r\n      label: \"字体颜色\",\r\n      name: \"styleColor\",\r\n      required: false,\r\n      placeholder: \"请选择字体颜色\",\r\n    },\r\n    {\r\n      componentName: \"SketchPicker\",\r\n      label: \"背景颜色\",\r\n      name: \"styleBackgroundColor\",\r\n      required: false,\r\n      placeholder: \"请选择背景颜色\",\r\n    },\r\n  ],\r\n};\r\n","export const data = {\r\n  // 数据项默认值\r\n  configureValue: {\r\n    useInterface: false,\r\n    dataType: \"mock\",\r\n    mock: {\r\n      value: \"文本框\",\r\n    },\r\n    url: \"\",\r\n    method: \"get\",\r\n    field: \"value\",\r\n  },\r\n  // 数据项配置\r\n  configure: [\r\n    {\r\n      componentName: \"Switch\",\r\n      label: \"使用组数据\",\r\n      name: \"useInterface\",\r\n      required: false,\r\n      placeholder: \"\",\r\n      tooltip: \"该组件使用组的接口数据\",\r\n    },\r\n    {\r\n      componentName: \"Select\",\r\n      label: \"请求类型\",\r\n      name: \"dataType\",\r\n      required: false,\r\n      placeholder: \"\",\r\n      relationFields: \"useInterface\",\r\n      relationValues: \"false\",\r\n      options: [\r\n        { code: \"mock\", name: \"mock数据\" },\r\n        { code: \"dynamic\", name: \"接口数据\" },\r\n      ],\r\n    },\r\n    {\r\n      componentName: \"JsonEdit\",\r\n      label: \"mock数据\",\r\n      name: \"mock\",\r\n      required: false,\r\n      placeholder: \"请输入mock数据\",\r\n      relationFields: \"dataType,useInterface\",\r\n      relationValues: \"mock,false\",\r\n    },\r\n    {\r\n      componentName: \"TextArea\",\r\n      label: \"接口地址\",\r\n      name: \"url\",\r\n      required: false,\r\n      placeholder: \"请输入接口地址\",\r\n      relationFields: \"dataType,useInterface\",\r\n      relationValues: \"dynamic,false\",\r\n    },\r\n    {\r\n      componentName: \"Select\",\r\n      label: \"请求方式\",\r\n      name: \"method\",\r\n      required: false,\r\n      placeholder: \"\",\r\n      relationFields: \"dataType,useInterface\",\r\n      relationValues: \"dynamic,false\",\r\n      options: [\r\n        { code: \"get\", name: \"GET\" },\r\n        { code: \"post\", name: \"post\" },\r\n      ],\r\n    },\r\n    {\r\n      componentName: \"Input\",\r\n      label: \"对应字段\",\r\n      name: \"field\",\r\n      required: false,\r\n      placeholder: \"\",\r\n    },\r\n  ],\r\n};\r\n","import { IElement } from \"@src/service\";\r\nimport { ModifyActions } from \"./action\";\r\nimport {\r\n  ALL_STATE,\r\n  WIDGET,\r\n  MODIFY_ELEMENT,\r\n  MODIFY_WIDGET,\r\n  SELECT_ELEMENT,\r\n  ADD_ELEMENT,\r\n  DELETE_ELEMENT,\r\n} from \"./type\";\r\nimport elementsConfig from \"@src/core/config/elements\";\r\n\r\nexport const initialState: ALL_STATE = {\r\n  widget: {\r\n    name: \"未命名微件\",\r\n    url: \"\",\r\n    id: \"\",\r\n    createTime: \"\",\r\n    type: \"text\",\r\n    count: 0,\r\n    x: 0,\r\n    y: 0,\r\n    column: 1,\r\n    row: 1,\r\n    configuration: {},\r\n    elements: [],\r\n    widgetId: \"\",\r\n  },\r\n  elementId: undefined,\r\n  widgetId: undefined,\r\n};\r\n\r\nexport const widgetReducer = (state = initialState, action: ModifyActions) => {\r\n  const copy: ALL_STATE = JSON.parse(JSON.stringify(state));\r\n  console.log(state, action);\r\n  switch (action.type) {\r\n    // 获取微件\r\n    case WIDGET: {\r\n      copy.widget = action.data;\r\n      copy.widgetId = action.data.widgetId;\r\n      return copy;\r\n    }\r\n    case MODIFY_WIDGET: {\r\n      copy.widget = {\r\n        ...copy.widget,\r\n        ...action.data,\r\n      };\r\n      return copy;\r\n    }\r\n    case ADD_ELEMENT: {\r\n      copy.widget.elements.push({\r\n        ...action.data,\r\n        ...elementsConfig[action.data.element],\r\n      });\r\n      copy.elementId = action.data.elementId;\r\n      return copy;\r\n    }\r\n\r\n    case DELETE_ELEMENT: {\r\n      copy.widget.elements = copy.widget.elements.filter(\r\n        (item) => item.elementId !== action.id\r\n      );\r\n      if (action.id === copy.elementId) {\r\n        copy.elementId = \"\";\r\n      }\r\n      return copy;\r\n    }\r\n\r\n    case MODIFY_ELEMENT: {\r\n      const index = copy.widget.elements.findIndex(\r\n        (item) => item.elementId === action.data.elementId\r\n      );\r\n      if (index !== -1) {\r\n        copy.widget.elements[index] = { ...action.data } as IElement;\r\n        copy.elementId = action.data.elementId;\r\n      }\r\n      return copy;\r\n    }\r\n\r\n    case SELECT_ELEMENT: {\r\n      copy.elementId = action.id;\r\n      return copy;\r\n    }\r\n    default: {\r\n      console.log(\"你访问的类型不对，请自行检查\");\r\n    }\r\n  }\r\n};\r\n","import { IWidget } from \"@src/service\";\r\n\r\n// 获取微件\r\nexport const WIDGET = \"WIDGET\";\r\nexport type WIDGET_TYPE = typeof WIDGET;\r\n\r\n// 修改微件\r\nexport const MODIFY_WIDGET = \"MODIFY_WIDGET\";\r\nexport type MODIFY_WIDGET_TYPE = typeof MODIFY_WIDGET;\r\n\r\n// 新增组件\r\nexport const ADD_ELEMENT = \"ADD_ELEMENT\";\r\nexport type ADD_ELEMENT_TYPE = typeof ADD_ELEMENT;\r\n\r\n// 删除组件\r\nexport const DELETE_ELEMENT = \"DELETE_ELEMENT\";\r\nexport type DELETE_ELEMENT_TYPE = typeof DELETE_ELEMENT;\r\n\r\n// 选中组件\r\nexport const SELECT_ELEMENT = \"SELECT_ELEMENT\";\r\nexport type SELECT_ELEMENT_TYPE = typeof SELECT_ELEMENT;\r\n\r\n// 修改组件\r\nexport const MODIFY_ELEMENT = \"MODIFY_ELEMENT\";\r\nexport type MODIFY_ELEMENT_TYPE = typeof MODIFY_ELEMENT;\r\n\r\nexport interface ALL_STATE {\r\n  widget: IWidget;\r\n  elementId: string | undefined;\r\n  widgetId: string | undefined;\r\n}\r\n"],"names":["baseText","code","type","name","configureValue","styleDisplay","styleTextShadowX","styleTextShadowY","styleTextShadowF","styleTextShadowC","styleBoxInset","styleBoxShadowX","styleBoxShadowY","styleBoxShadowF","styleBoxShadowC","styleBorderStyle","styleBorderWidth","styleBorderColor","styleBorderTopLeftRadius","styleBorderTopRightRadius","styleBorderBottomLeftRadius","styleBorderBottomRightRadius","styleFontSize","styleLetterSpacing","styleFontWeight","styleTextAlign","styleBackgroundColor","styleFontFamily","styleLineHeight","styleColor","coordinateValue","left","top","width","height","dataValue","useInterface","dataType","mock","value","url","method","field","initialState","widget","id","createTime","count","x","y","column","row","configuration","elements","widgetId","elementId","undefined","widgetReducer","state","arguments","length","action","copy","JSON","parse","stringify","console","log","WIDGET","data","MODIFY_WIDGET","ADD_ELEMENT","push","elementsConfig","element","DELETE_ELEMENT","filter","item","MODIFY_ELEMENT","index","findIndex","SELECT_ELEMENT"],"sourceRoot":""}