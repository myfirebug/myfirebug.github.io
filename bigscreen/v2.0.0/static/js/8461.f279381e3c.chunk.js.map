{"version":3,"file":"static/js/8461.f279381e3c.chunk.js","mappings":"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","sources":["webpack://cli/./src/components/total/index.tsx","webpack://cli/./src/components/trendChart/index.tsx","webpack://cli/./src/components/useLeaderboard/index.tsx","webpack://cli/./src/components/table/index.tsx","webpack://cli/./src/pages/widget/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Col, Skeleton } from \"antd\";\r\nimport \"./index.scss\";\r\n\r\ninterface ITotal {\r\n  datas: any[];\r\n  loading: boolean;\r\n  cardNum?: number;\r\n}\r\n\r\nconst Total = React.memo(\r\n  (props: ITotal) => {\r\n    const { datas, loading, cardNum = 4 } = props;\r\n    return (\r\n      <>\r\n        {loading\r\n          ? Array(cardNum)\r\n              .fill(0)\r\n              .map((item, index) => (\r\n                <Col span={24 / cardNum} key={index}>\r\n                  <div className=\"cms-components__card\">\r\n                    <Skeleton active title={false} />\r\n                  </div>\r\n                </Col>\r\n              ))\r\n          : \"\"}\r\n        {datas.map((item, index) => (\r\n          <Col span={24 / cardNum} key={index}>\r\n            <div className=\"cms-components__card\">\r\n              <div className=\"name\">{item.name}</div>\r\n              <div className=\"total\">\r\n                <b>{item.total}</b>\r\n                {item.unit}\r\n              </div>\r\n              <div className=\"bg-font\">{item.bgFont}</div>\r\n            </div>\r\n          </Col>\r\n        ))}\r\n      </>\r\n    );\r\n  },\r\n  (prevProps, nextProps) => {\r\n    if (JSON.stringify(prevProps) === JSON.stringify(nextProps)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n);\r\n\r\nexport default Total;\r\n","import React, { memo, useEffect, useState } from \"react\";\r\nimport { Skeleton } from \"antd\";\r\nimport { Box, Echarts } from \"@src/components\";\r\nimport { IComponentstrendItem } from \"@src/service\";\r\n\r\ninterface ITrendChart {\r\n  datas: IComponentstrendItem[];\r\n  loading: boolean;\r\n}\r\n\r\nconst TrendChart = memo(\r\n  (props: ITrendChart) => {\r\n    const { datas, loading } = props;\r\n    const [xAxisData, setXAxisData] = useState<string[]>([]);\r\n    const [seriesData, setSeriesData] = useState<number[]>([]);\r\n\r\n    useEffect(() => {\r\n      let xAxisArr = [];\r\n      let seriesArr = [];\r\n      for (let i = 0; i < datas.length; i++) {\r\n        xAxisArr.push(datas[i].name);\r\n        seriesArr.push(datas[i].value);\r\n      }\r\n      setXAxisData(xAxisArr);\r\n      setSeriesData(seriesArr);\r\n    }, [datas]);\r\n    return (\r\n      <Box title=\"新增走势\">\r\n        {loading ? (\r\n          <Skeleton active />\r\n        ) : (\r\n          <Echarts\r\n            loading={loading}\r\n            option={{\r\n              color: [\"#1677ff\"],\r\n              backgroundColor: \"rgba(0,0,0,0)\",\r\n              tooltip: {},\r\n              xAxis: {\r\n                data: xAxisData,\r\n                boundaryGap: false,\r\n              },\r\n              grid: {\r\n                left: 30,\r\n                top: 20,\r\n                bottom: 30,\r\n                right: 0,\r\n              },\r\n              yAxis: {},\r\n              series: [\r\n                {\r\n                  name: \"新增组件\",\r\n                  type: \"line\",\r\n                  data: seriesData,\r\n                  smooth: true,\r\n                  areaStyle: {},\r\n                },\r\n              ],\r\n            }}\r\n          />\r\n        )}\r\n      </Box>\r\n    );\r\n  },\r\n  (prevProps, nextProps) => {\r\n    if (JSON.stringify(prevProps) === JSON.stringify(nextProps)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n);\r\n\r\nexport default TrendChart;\r\n","import React, { memo, useEffect, useState } from \"react\";\r\nimport { Skeleton } from \"antd\";\r\nimport { Box, Echarts } from \"@src/components\";\r\nimport { IComponentstrendItem } from \"@src/service\";\r\n\r\ninterface ITrendChart {\r\n  datas: IComponentstrendItem[];\r\n  loading: boolean;\r\n}\r\n\r\nconst TrendChart = memo(\r\n  (props: ITrendChart) => {\r\n    const { datas, loading } = props;\r\n    const [xAxisData, setXAxisData] = useState<string[]>([]);\r\n    const [seriesData, setSeriesData] = useState<number[]>([]);\r\n\r\n    useEffect(() => {\r\n      let xAxisArr = [];\r\n      let seriesArr = [];\r\n      for (let i = 0; i < datas.length; i++) {\r\n        xAxisArr.push(datas[i].name);\r\n        seriesArr.push(datas[i].value);\r\n      }\r\n      setXAxisData(xAxisArr);\r\n      setSeriesData(seriesArr);\r\n    }, [datas]);\r\n    return (\r\n      <Box title=\"使用排行榜TOP8\">\r\n        {loading ? (\r\n          <Skeleton active />\r\n        ) : (\r\n          <Echarts\r\n            loading={loading}\r\n            option={{\r\n              color: [\"#1677ff\"],\r\n              backgroundColor: \"rgba(0,0,0,0)\",\r\n              tooltip: {},\r\n              xAxis: {\r\n                type: \"value\",\r\n              },\r\n              yAxis: {\r\n                data: xAxisData,\r\n                type: \"category\",\r\n              },\r\n              grid: {\r\n                left: 50,\r\n                top: 20,\r\n                bottom: 30,\r\n                right: 20,\r\n              },\r\n              series: [\r\n                {\r\n                  name: \"使用排行榜TOP8\",\r\n                  type: \"bar\",\r\n                  data: seriesData,\r\n                  itemStyle: {\r\n                    borderRadius: [10, 10, 10, 10],\r\n                  },\r\n                },\r\n              ],\r\n            }}\r\n          />\r\n        )}\r\n      </Box>\r\n    );\r\n  },\r\n  (prevProps, nextProps) => {\r\n    if (JSON.stringify(prevProps) === JSON.stringify(nextProps)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n);\r\n\r\nexport default TrendChart;\r\n","import React from \"react\";\r\nimport { Table } from \"antd\";\r\nimport type { ColumnsType } from \"antd/es/table\";\r\nimport \"./index.scss\";\r\n\r\ninterface DataType {\r\n  key: string;\r\n  name: string;\r\n  money: string;\r\n  address: string;\r\n}\r\n\r\nconst columns: ColumnsType<DataType> = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n  },\r\n  {\r\n    title: \"Cash Assets\",\r\n    className: \"column-money\",\r\n    dataIndex: \"money\",\r\n  },\r\n  {\r\n    title: \"Address\",\r\n    dataIndex: \"address\",\r\n  },\r\n];\r\n\r\nconst data: DataType[] = [\r\n  {\r\n    key: \"1\",\r\n    name: \"John Brown\",\r\n    money: \"￥300,000.00\",\r\n    address: \"New York No. 1 Lake Park\",\r\n  },\r\n  {\r\n    key: \"2\",\r\n    name: \"Jim Green\",\r\n    money: \"￥1,256,000.00\",\r\n    address: \"London No. 1 Lake Park\",\r\n  },\r\n  {\r\n    key: \"3\",\r\n    name: \"Joe Black\",\r\n    money: \"￥120,000.00\",\r\n    address: \"Sydney No. 1 Lake Park\",\r\n  },\r\n];\r\n\r\nconst CompoentsTable: React.FC = () => (\r\n  <Table\r\n    style={{ marginTop: \"16px\" }}\r\n    columns={columns}\r\n    dataSource={data}\r\n    pagination={{\r\n      position: [\"bottomCenter\"],\r\n    }}\r\n  />\r\n);\r\n\r\nexport default CompoentsTable;\r\n","import React, { FC, useEffect } from \"react\";\r\nimport { Col, Row } from \"antd\";\r\nimport { useComponents } from \"@src/core/hook\";\r\nimport Total from \"@src/components/total\";\r\nimport TrendChart from \"@src/components/trendChart\";\r\nimport CompoentsTable from \"@src/components/table\";\r\nimport UseLeaderboard from \"@src/components/useLeaderboard\";\r\nimport \"./index.scss\";\r\n\r\nconst Widget: FC = () => {\r\n  const { total, getTotal, getTrend, trend, leaderboard, getLeaderboard } =\r\n    useComponents();\r\n  useEffect(() => {\r\n    getTotal();\r\n    getTrend();\r\n    getLeaderboard();\r\n  }, [getTotal, getTrend, getLeaderboard]);\r\n  return (\r\n    <div className=\"cms-components\">\r\n      <Row gutter={16}>\r\n        <Total datas={total.datas} loading={total.loading} />\r\n        <Col span={18}>\r\n          <TrendChart datas={trend.datas} loading={trend.loading} />\r\n        </Col>\r\n        <Col span={6}>\r\n          <UseLeaderboard\r\n            datas={leaderboard.datas}\r\n            loading={leaderboard.loading}\r\n          />\r\n        </Col>\r\n        <Col span={24}>\r\n          <CompoentsTable />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Widget;\r\n"],"names":["Total","React","props","datas","loading","cardNum","Array","fill","map","item","index","Col","span","key","className","Skeleton","active","title","name","total","unit","bgFont","prevProps","nextProps","JSON","stringify","TrendChart","memo","xAxisData","setXAxisData","useState","seriesData","setSeriesData","useEffect","xAxisArr","seriesArr","i","length","push","value","Box","Echarts","option","color","backgroundColor","tooltip","xAxis","data","boundaryGap","grid","left","top","bottom","right","yAxis","series","type","smooth","areaStyle","itemStyle","borderRadius","columns","dataIndex","money","address","CompoentsTable","Table","style","marginTop","dataSource","pagination","position","Widget","getTotal","getTrend","trend","leaderboard","getLeaderboard","useComponents","Row","gutter","UseLeaderboard"],"sourceRoot":""}